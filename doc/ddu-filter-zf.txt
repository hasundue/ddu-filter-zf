*ddu-filter-zf.txt*        For Vim/Neovim       Last change: 2023 September 02

INTRODUCTION                                      *ddu-filter-zf-introduction*

`ddu-filter-zf` is a fuzzy-matcher for ddu.vim
<https://github.com/Shougo/ddu.vim>, featuring zf
<https://github.com/natecraddock/zf>, a fuzzy-finder designed for
fuzzy-matching file paths.


REQUIREMENTS                                      *ddu-filter-zf-requirements*

- Deno <https://deno.land/>
- denops.vim <https://github.com/vim-denops/denops.vim>
- ddu.vim <https://github.com/Shougo/ddu.vim>
- Zig <https://ziglang.org> (optional, if you want to build `libzf` yourself)

Latest stable versions are only supported unless explicitly mentioned.


INSTALLATION                                      *ddu-filter-zf-installation*

A build step is required to compile `libzf`. In the case of dein
<https://github.com/Shougo/dein.vim>, for example, you can specify the build
command as follows:

>viml
    call dein#add('hasundue/ddu-filter-zf', #{ build: 'deno task build' })
<

Alternatively, you can use the pre-built `libzf` provided in the release
archives. In this case, you need to specify the download command as follows:

>viml
    call dein#add('hasundue/ddu-filter-zf', #{ build: 'deno task download' })
<


CONFIGURATION                                    *ddu-filter-zf-configuration*

`ddu-filter-zf` is provided as a matcher for ddu.vim, technically, but it works
as a sorter at the same time by its nature. Here is an example configuration
where `ddu-filter-zf` is used as the filter for all the sources:

>viml
    call ddu#custom#patch_global(#{
      \   sourceOptions: #{
      \     _: #{
      \       matchers: ['matcher_zf'],
      \     },
      \   },
      \   filterParams: #{
      \     matcher_zf: #{
      \       plainText: v:false,
      \       caseSensitive: v:false,
      \     },
      \   },
      \ })
<


PARAMETERS                                          *ddu-filter-zf-parameters*


PLAINTEXT ~

- Type: `boolean`
- Default: `false`

If `true`, the filter will treat items as plain text, not file paths. This
disables the path-specific features of `zf`.


CASESENSITIVE ~

- Type: `boolean`
- Default: `false`

If `true`, the filter will perform case-sensitive matching.

Generated by panvimdoc <https://github.com/kdheepak/panvimdoc>

vim:tw=78:ts=8:noet:ft=help:norl:
